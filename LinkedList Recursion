package LinkedList;

public class LinkedListRecursion {

    // Node class for LinkedList
    static class Node {
        int value;
        Node next;

        Node(int value) {
            this.value = value;
            this.next = null;
        }
    }

    // Recursive method to reverse the linked list
    public static Node reverse(Node head) {
        // Base case: if head is null or only one node, return head
        if (head == null || head.next == null) {
            return head;
        }

        // Recursive case: reverse the rest of the list
        Node newHead = reverse(head.next);

        // Adjust pointers
        head.next.next = head;
        head.next = null;

        return newHead;
    }

    // Print LinkedList
    public static void printList(Node head) {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.value + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);

        System.out.println("Original LinkedList:");
        printList(head);

        head = reverse(head);

        System.out.println("Reversed LinkedList:");
        printList(head);
    }
}
