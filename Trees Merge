public class TreesMerge {

    public static void main(String[] args) {
        TreeNode tree1 = new TreeNode(1);
        tree1.left = new TreeNode(0);
        tree1.right = new TreeNode(3);

        TreeNode tree2 = new TreeNode(2);
        tree2.left = new TreeNode(1);
        tree2.right = new TreeNode(4);

        TreeNode mergedTree = mergeTrees(tree1, tree2);
        System.out.print("Merged Tree (In-Order Traversal): ");
        inorderTraversal(mergedTree);
    }

    public static TreeNode mergeTrees(TreeNode tree1, TreeNode tree2) {
        ArrayList<Integer> list1 = new ArrayList<>();
        ArrayList<Integer> list2 = new ArrayList<>();

        inorderToList(tree1, list1);
        inorderToList(tree2, list2);

        ArrayList<Integer> mergedList = mergeLists(list1, list2);

        return sortedListToBST(mergedList, 0, mergedList.size() - 1);
    }

    public static void inorderToList(TreeNode node, ArrayList<Integer> list) {
        if (node == null) return;
        inorderToList(node.left, list);
        list.add(node.data);
        inorderToList(node.right, list);
    }

    public static ArrayList<Integer> mergeLists(ArrayList<Integer> list1, ArrayList<Integer> list2) {
        ArrayList<Integer> mergedList = new ArrayList<>();
        int i = 0, j = 0;

        while (i < list1.size() && j < list2.size()) {
            if (list1.get(i) < list2.get(j)) {
                mergedList.add(list1.get(i++));
            } else {
                mergedList.add(list2.get(j++));
            }
        }

        while (i < list1.size()) mergedList.add(list1.get(i++));
        while (j < list2.size()) mergedList.add(list2.get(j++));

        return mergedList;
    }

    public static TreeNode sortedListToBST(ArrayList<Integer> list, int start, int end) {
        if (start > end) return null;
        int mid = (start + end) / 2;
        TreeNode node = new TreeNode(list.get(mid));
        node.left = sortedListToBST(list, start, mid - 1);
        node.right = sortedListToBST(list, mid + 1, end);
        return node;
    }

    public static void inorderTraversal(TreeNode node) {
        if (node == null) return;
        inorderTraversal(node.left);
        System.out.print(node.data + " ");
        inorderTraversal(node.right);
    }
}
