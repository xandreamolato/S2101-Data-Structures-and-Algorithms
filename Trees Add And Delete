package Trees;

public class TreesAddAndDelete {

    // Define the TreeNode class
    static class TreeNode {
        int val;
        TreeNode left, right;

        // Constructor to create a new tree node
        TreeNode(int value) {
            val = value;
            left = right = null;
        }
    }

    // Function to insert a new node in the Binary Search Tree
    public static TreeNode insert(TreeNode root, int value) {
        // If the tree is empty, create the root node
        if (root == null) {
            return new TreeNode(value);
        }

        // Recursively insert the value in the left or right subtree
        if (value < root.val) {
            root.left = insert(root.left, value);
        } else if (value > root.val) {
            root.right = insert(root.right, value);
        }

        // Return the unchanged root node
        return root;
    }

    // Function to find the minimum value node in the tree
    public static TreeNode findMin(TreeNode node) {
        while (node.left != null) {
            node = node.left;
        }
        return node;
    }

    // Function to delete a node from the Binary Search Tree
    public static TreeNode deleteNode(TreeNode root, int value) {
        // Base case: If the tree is empty
        if (root == null) {
            return root;
        }

        // Recursively find the node to be deleted
        if (value < root.val) {
            root.left = deleteNode(root.left, value);
        } else if (value > root.val) {
            root.right = deleteNode(root.right, value);
        } else {
            // Node to be deleted found

            // Case 1: Node with no child (leaf node)
            if (root.left == null && root.right == null) {
                return null;
            }
            // Case 2: Node with one child
            else if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            }
            // Case 3: Node with two children
            else {
                // Find the in-order successor (minimum value in the right subtree)
                TreeNode minNode = findMin(root.right);
                root.val = minNode.val;

                // Delete the in-order successor
                root.right = deleteNode(root.right, minNode.val);
            }
        }
        return root;
    }

    // Function to perform In-Order Traversal and print the tree
    public static void inOrderTraversal(TreeNode root) {
        if (root != null) {
            // Traverse the left subtree
            inOrderTraversal(root.left);

            // Visit the node
            System.out.print(root.val + " ");

            // Traverse the right subtree
            inOrderTraversal(root.right);
        }
    }

    // Main method to test add and delete operations
    public static void main(String[] args) {
        TreeNode root = null;

        // Inserting nodes into the Binary Search Tree
        int[] values = {50, 30, 20, 40, 70, 60, 80};
        for (int value : values) {
            root = insert(root, value);
        }

        // Performing in-order traversal to print tree before deletion
        System.out.print("Tree before deletion (In-order Traversal): ");
        inOrderTraversal(root);

        // Deleting a node from the tree
        System.out.println("\nDeleting node 50...");
        root = deleteNode(root, 50);

        // Performing in-order traversal to print tree after deletion
        System.out.print("Tree after deletion (In-order Traversal): ");
        inOrderTraversal(root);
    }
}
